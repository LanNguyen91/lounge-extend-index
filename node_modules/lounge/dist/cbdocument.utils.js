'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _mpath = require('mpath');

var _mpath2 = _interopRequireDefault(_mpath);

var _utils = require('./utils');

var _couchbaseDriver = require('couchbase-driver');

var _couchbaseDriver2 = _interopRequireDefault(_couchbaseDriver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Builds index objects based on initial and current ref doc values
 * @param initialRefs
 * @param currentRefs
 * @returns {Array}
 */
exports.buildIndexObjects = function (initialRefs, currentRefs) {
  var ret = [];
  var refValueNames = Object.keys(initialRefs);

  refValueNames.forEach(function (refValueName) {
    var initialRefValue = initialRefs[refValueName];
    var currentRefValue = currentRefs[refValueName];

    if (!initialRefValue || !currentRefValue) {
      return;
    }

    var name = initialRefValue.name;
    var initialValue = initialRefValue.value;
    var indexType = initialRefValue.indexType || currentRefs.indexType;
    var currentValue = currentRefs[refValueName].value;

    if (_lodash2.default.isNull(currentValue) || _lodash2.default.isUndefined(currentValue)) {
      currentValue = null;
    }

    if (Array.isArray(currentValue)) {
      currentValue = currentValue.sort();
    }

    if (Array.isArray(initialValue) || Array.isArray(currentValue)) {
      var toRemove = _lodash2.default.difference(initialValue || [], currentValue || []) || [];
      var union = _lodash2.default.union(initialValue || [], currentValue || []) || [];
      var toAdd = _lodash2.default.difference(union, toRemove) || [];

      toRemove.forEach(function (v) {
        ret.push({
          name: name,
          indexType: indexType,
          value: v,
          action: 'remove'
        });
      });

      toAdd.forEach(function (v) {
        ret.push({
          name: name,
          indexType: indexType,
          value: v,
          action: 'upsert'
        });
      });
    } else if (_lodash2.default.isEqual(initialValue, currentValue)) {
      ret.push({
        name: name,
        value: currentValue,
        indexType: indexType,
        action: 'upsert'
      });
    } else {
      if (initialValue !== null) {
        ret.push({
          name: name,
          value: initialValue,
          indexType: indexType,
          action: 'remove'
        });
      }

      if (currentValue !== null) {
        ret.push({
          name: name,
          value: currentValue,
          indexType: indexType,
          action: 'upsert'
        });
      }
    }
  });

  return ret;
};

/*!
 * Checks whether an options parameter has valid populate options
 * @param options
 * @returns {*}
 */
exports.hasPopulate = function (options) {
  if (!options) {
    return false;
  }

  if (typeof options.populate === 'undefined' || options.populate === null) {
    return false;
  }

  if (_lodash2.default.isString(options.populate)) {
    return !_lodash2.default.isEmpty(options.populate);
  }

  if (_lodash2.default.isPlainObject(options.populate) && _lodash2.default.isString(options.populate.path)) {
    return !_lodash2.default.isEmpty(options.populate.path);
  }

  if (_lodash2.default.isArray(options.populate)) {
    var t = _lodash2.default.compact(options.populate);
    return !_lodash2.default.isEmpty(t);
  }

  if (_lodash2.default.isBoolean(options.populate)) {
    return options.populate;
  }

  return false;
};

/*!
 * Builds ref document values
 * @param indexes
 * @param data
 * @returns {{}}
 */
exports.buildRefValues = function (indexes, data) {
  var v = void 0;
  var ret = {};
  for (v in indexes) {
    if (indexes.hasOwnProperty(v)) {
      var path = indexes[v].path;
      var name = indexes[v].name;
      var indexType = indexes[v].indexType;

      var value = null;
      if (indexes[v].compound) {
        value = _lodash2.default.map(path, function (p) {
          return (0, _utils.processValue)(_mpath2.default.get(p, data));
        });
        value = (0, _utils.expandValues)(value);
        value = _lodash2.default.compact(value);

        var containsNested = _lodash2.default.some(value, _lodash2.default.isArray);
        if (containsNested) {
          value = _lodash2.default.map(value, function (v) {
            return v.join('_');
          });
        } else {
          value = value.join('_');
        }
      } else {
        value = (0, _utils.processValue)(_mpath2.default.get(path, data));
      }

      ret[name] = {
        path: path,
        value: value,
        name: name,
        indexType: indexType
      };
    }
  }

  return ret;
};

var DBOPS = _couchbaseDriver2.default.OPERATIONS;

exports.generateIndexTransform = function (obj, refKeyValue) {
  return function indexTranform(indexDoc) {
    if (!indexDoc && obj.action === 'remove') {
      return { action: DBOPS.NOOP };
    }

    if (!indexDoc) {
      indexDoc = {
        keys: []
      };
    }

    if (!indexDoc.keys || !Array.isArray(indexDoc.keys)) {
      indexDoc.keys = [];
    }

    var r = { action: DBOPS.NOOP };
    if (indexDoc && indexDoc.keys && Array.isArray(indexDoc.keys)) {
      var valueIndex = indexDoc.keys.indexOf(refKeyValue);
      if (obj.action === 'remove' && valueIndex >= 0) {
        indexDoc.keys.splice(valueIndex, 1);
      } else if (valueIndex === -1) {
        indexDoc.keys.push(refKeyValue);
      }

      if (indexDoc.keys.length) {
        r.action = DBOPS.UPSERT;
        r.value = indexDoc;
      } else {
        // no indexes. remove the document
        r.action = DBOPS.REMOVE;
      }
    }
    return r;
  };
};