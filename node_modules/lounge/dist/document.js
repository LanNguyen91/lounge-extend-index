'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _basemodel = require('./basemodel');

var _privatekey = require('./privatekey');

var _privatekey2 = _interopRequireDefault(_privatekey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Document = function (_BaseModel) {
  _inherits(Document, _BaseModel);

  /**
   * @classdesc Base constructor for all created Document instances.
   * Represents just the document data and generic properties and functions.
   * Clients should never have to call this directly.
   *
   * @description Clients do not need to create Document manually.
   * @class
   * @augments BaseModel
   * @param {Object} values - the object data
   * @param {Object} options - creation options
   * @param {Boolean} options.clone - Whether to deep clone the incoming data. Default: <code>false</code>.
   *                                  Make sure you wish to do this as it has performance implications. This is
   *                                  useful if you are creating multiple instances from same base data and then
   *                                  wish to modify each instance.
   * @param {Schema} schema - schema instance
   * @param {String} name - the model name
   * @returns {Document}
   */
  function Document(values, options, schema, name) {
    _classCallCheck(this, Document);

    var _this = _possibleConstructorReturn(this, (Document.__proto__ || Object.getPrototypeOf(Document)).call(this, values, options, schema));

    if (name) {
      _this[_privatekey2.default].modelName = name;
    }

    var idKey = _this.getDocumentKeyKey();

    // auto generate document key if needed
    if (_this.schema.key.generate === true && !_this[idKey]) {
      _this.set(idKey, (0, _uuid2.default)());
      _this[_privatekey2.default]._isNew = true;
    }

    // if they supplied init() method
    if (_this.init && _lodash2.default.isFunction(_this.init)) {
      _this.init();
    }
    return _this;
  }

  /**
   * The name the name of the model. This is both a static and instance property.
   * @member {String}
   * @example
   * var schema = lounge.schema({ name: String });
   * var Cat = lounge.model('Cat', schema);
   * var kitty = new Cat({ name: 'Zildjian' });
   * console.log(Cat.modelName); // 'Cat'
   * console.log(kitty.modelName); // 'Cat'
   */


  _createClass(Document, [{
    key: '_toObject',


    /**
     *
     * @param options
     * @param json
     * @returns {{}}
     * @private
     */
    value: function _toObject(options, json) {
      options = this._prepareToObjectOptions(options, json);
      var ret = _get(Document.prototype.__proto__ || Object.getPrototypeOf(Document.prototype), '_toObject', this).call(this, options, json);

      this._applyDocumentKey(ret, options);

      return ret;
    }

    /**
     * Helper function to get the document key.
     * @public
     * @param {Boolean} full - If <code>true</code> the full expanded value of the key will be returned.
     *                  If there were any suffix and / or prefix defined in schema they are applied.
     * @returns {String} document key
     * @example
     * var schema = lounge.schema({ email: String }, { keyPrefix: 'user::'});
     * var User = lounge.model('User', schema);
     * var user = new User({ email: 'bsmith@acme.com' });
     * console.log(user.getDocumentKeyValue()); // 114477a8-1901-4146-8c90-0fc9eec57a58
     * console.log(user.getDocumentKeyValue(true)); // user::114477a8-1901-4146-8c90-0fc9eec57a58
     */

  }, {
    key: 'getDocumentKeyValue',
    value: function getDocumentKeyValue(full) {
      var idKey = this.getDocumentKeyKey();
      return this.schema.getDocumentKeyValue(this[idKey], full);
    }

    /**
     * Gets the Document key property name.
     * @public
     * @returns {String} Document key property name
     * @example
     * var schema = lounge.schema({ email: { type: String, key: true, generate: false }});
     * var User = lounge.model('User', schema);
     * var user = new User({ email: 'bsmith@acme.com' });
     * console.log(user.getDocumentKeyKey()); // email
     */

  }, {
    key: 'getDocumentKeyKey',
    value: function getDocumentKeyKey() {
      return this.schema.key.docKeyKey;
    }

    /**
     * Static version of <code>getDocumentKeyValue</code>.
     * @public
     * @param {String} id - id of the document
     * @param {Boolean} full - If <options>true</options> the full expanded value of the key will be returned.
     *                  If there were any suffix and / or prefix defined in schema they are applied.
     * @returns {string} Document key / id
     * @example
     * // assuming keyPrefix: 'user::'
     * console.log(User.getDocumentKeyValue('114477a8-1901-4146-8c90-0fc9eec57a58', true)); // user::114477a8-1901-4146-8c90-0fc9eec57a58
     * console.log(User.getDocumentKeyValue('user::114477a8-1901-4146-8c90-0fc9eec57a58', true)); // user::114477a8-1901-4146-8c90-0fc9eec57a58
     * console.log(User.getDocumentKeyValue('user::114477a8-1901-4146-8c90-0fc9eec57a58', false)); // 114477a8-1901-4146-8c90-0fc9eec57a58
     * console.log(User.getDocumentKeyValue('114477a8-1901-4146-8c90-0fc9eec57a58', false)); // 114477a8-1901-4146-8c90-0fc9eec57a58
     */

  }, {
    key: '_isDocumentObject',


    /**
     * Used to detect instance of schema object internally.
     * @private
     */
    value: function _isDocumentObject() {
      return true;
    }

    /*!
     * Applies document key
     * @param self
     * @param ret
     * @param options
     */

  }, {
    key: '_applyDocumentKey',
    value: function _applyDocumentKey(ret, options) {
      if (!options) {
        options = {};
      }

      var schemaOption = options.json ? 'toJSON' : 'toObject';

      var expandDocumentKey = void 0;
      if (_lodash2.default.isBoolean(options.expandDocumentKey)) {
        expandDocumentKey = options.expandDocumentKey;
      }
      if (!_lodash2.default.isBoolean(expandDocumentKey)) {
        expandDocumentKey = _lodash2.default.isPlainObject(this.schema.options[schemaOption]) && _lodash2.default.isBoolean(this.schema.options[schemaOption].expandDocumentKey) ? this.schema.options[schemaOption].expandDocumentKey : false;
      }

      if (expandDocumentKey) {
        var k = this.getDocumentKeyKey();
        ret[k] = this.getDocumentKeyValue(true);
      }
    }
  }, {
    key: 'modelName',
    get: function get() {
      return this[_privatekey2.default].modelName;
    }

    /**
     * Has a key been generated for this document.
     * @member {Boolean}
     * @example
     * var schema = lounge.schema({ name: String });
     * var Cat = lounge.model('Cat', schema);
     * var kitty = new Cat({ name: 'Zildjian' });
     * console.log(kitty._isNew); // true
     * var kat = new Cat({ id: '123abc', name: 'Sabian' });
     * console.log(kat._isNew); // false
     */

  }, {
    key: '_isNew',
    get: function get() {
      return this[_privatekey2.default]._isNew;
    }
  }], [{
    key: 'getDocumentKeyValue',
    value: function getDocumentKeyValue(id, full) {
      return this.schema.getDocumentKeyValue(id, full);
    }
  }]);

  return Document;
}(_basemodel.BaseModel);

exports.default = Document;