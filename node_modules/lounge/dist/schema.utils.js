'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _inflection = require('inflection');

var _inflection2 = _interopRequireDefault(_inflection);

var _traverse = require('traverse');

var _traverse2 = _interopRequireDefault(_traverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * @param ctx
 * @returns {string}
 */
function getPathFromContext(ctx) {
  var path = ctx.path.join('.');

  // check if we specifically set type
  var lastElement = ctx.path[ctx.path.length - 1];
  if (lastElement) {
    var lev = lastElement.toLowerCase();
    if (lev === 'type') {
      path = ctx.path.slice(0, ctx.path.length - 1).join('.');
    }
  }

  // check if in array
  var reg = new RegExp('^\\d+$');
  var lastPath = path.substring(path.lastIndexOf('.') + 1);
  if (lastPath && reg.test(lastPath)) {
    path = path.substring(0, path.lastIndexOf('.'));
  }

  return path;
}

var Model = void 0;

/*!
 *
 * @param descriptor
 * @returns {Array}
 */
exports.getRefs = function (descriptor) {
  if (!Model) {
    Model = require('./model').Model;
  }

  var refs = [];
  (0, _traverse2.default)(descriptor).forEach(function (obj) {
    var ctx = this;
    var t = obj.type || obj;
    if (obj && (obj.modelName && Model.isPrototypeOf(t) || obj.type === Model && obj.modelName)) {
      var path = getPathFromContext(ctx);

      refs.push({
        path: path,
        ref: obj.modelName
      });
    }
  });

  refs = _lodash2.default.compact(refs);

  return refs;
};

/*!
 *
 * @param descriptor
 * @returns {Array}
 */
exports.getIndexes = function (descriptor) {
  if (!Model) {
    Model = require('./model').Model;
  }

  var inds = [];

  (0, _traverse2.default)(descriptor).forEach(function (obj) {
    var ctx = this;
    if (obj && obj.index === true && (obj.type || obj.Type)) {
      var t = obj.type || obj.Type;
      if (t === String || t === Number || t === 'string' || t === 'number' || Model.isPrototypeOf(t) && t.modelName || obj.modelName && Model.isPrototypeOf(t) || obj.modelName && t === Model) {
        var path = getPathFromContext(ctx);

        var name = obj.indexName;
        if (!name) {
          name = ctx.key;
          var reg = new RegExp('^\\d+$');
          if (reg.test(name)) {
            name = ctx.path[ctx.path.length - 2];
          }
          name = _inflection2.default.singularize(name);
        }

        var indexType = obj.indexType ? obj.indexType.toLowerCase() : 'single';
        if (indexType !== 'single' && indexType !== 'array') {
          indexType = 'single';
        }

        var indexData = { path: path, name: name, indexType: indexType };
        if (obj.refKeyCase) {
          indexData.refKeyCase = obj.refKeyCase.toLowerCase();
        }

        inds.push(indexData);
      }
    }
  });

  inds = _lodash2.default.compact(inds);
  return inds;
};

exports.getIndexName = function (indexPath) {
  if (Array.isArray(indexPath)) {
    return indexPath.join('_and_');
  }
  return indexPath;
};